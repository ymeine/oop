{"name":"OOP","tagline":"Object Oriented Programming library, with different levels of granularity, from raw object manipulation to powerful classes creation. All aimed at creating a better API in the end.","body":"# One more OOP library?\r\n\r\n> What's the goal of this new library?\r\n\r\nI named it [OOP](http://en.wikipedia.org/wiki/Object-oriented_programming), as Object Oriented Programming, but this is more general: with this library you'll be able to create flexible and simple API in short time, with lots of concepts and conventions shared from many parts of the world of programming.\r\n\r\nThis mixes pure OOP concepts, adapted to JavaScript, and typing theory. To be clear, a class is for me just a complex type able to make use of other types definitions, either complex (classes) or primitive/native.\r\n\r\n> What's different from other libraries?\r\n\r\nThe implementation of this new library comes with my own principles I apply in every project: \r\n\r\n* simplicity\r\n* consistency\r\n* flexibility\r\n* extensibility\r\n* performances\r\n\r\n# Other libraries of the same kind & Inspiration\r\n\r\nOOP libraries: \r\n\r\n* [JSFace](https://github.com/tnhu/jsface)\r\n* [JS.Class](http://jsclass.jcoglan.com/)\r\n* [Klass](https://github.com/ded/klass)\r\n* [Classy](http://classy.pocoo.org/)\r\n* [PTClass](https://github.com/Jakobo/PTClass)\r\n* [my.Class](https://github.com/jiem/my-class)\r\n* [Joose](http://code.google.com/p/joose-js/)\r\n* ...\r\n\r\nTyping/Schemas: \r\n\r\n* [Aria Templates](http://ariatemplates.com/) [JSON Bean Definitions](http://ariatemplates.com/usermanual/latest/json_bean_definitions): typing system, defining schemas\r\n* [mongoosejs](http://mongoosejs.com/) [schemas](http://mongoosejs.com/docs/guide.html)\r\n* ...\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}