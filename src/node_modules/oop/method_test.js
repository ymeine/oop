var tester = require('tester');
var Logger = tester.logger.Logger;

var method = require('./method');
var Method = method.Method;



var $logger = new Logger();

try {

// -----------------------------------------------------------------------------

$logger.separator('Init');
// $logger.on();

var callCount = 0;
var m1 = Method({
	process: function() {
		callCount++;
		return 5;
	}
});


$logger.log(m1);
$logger.log(m1());

// ----------------------------------------------------------------------- chain

$logger.separator('Chain');
// $logger.on();

m1.chain = true;
var context = {val: 10};

$logger.log(m1);
$logger.log(m1.call(context));

delete m1.chain;

// ------------------------------------------------------------------- arg chain

$logger.separator('Arguments chain');
// $logger.on();

m1.chain = true;

m1.chain = 0;
$logger.log(m1(100));
m1.chain = 1;
$logger.log(m1(100, 200));
$logger.log(m1(100));

delete m1.chain;

// ----------------------------------------------------------------------- cache

$logger.separator('Cache');
// $logger.on();

m1.cache = true;

$logger.log(callCount, 'Initial call count: ');
$logger.log(m1(1), 'Output: ');
$logger.log(callCount, 'Call count: ');
$logger.log(m1(1), 'Output: ');
$logger.log(callCount, 'Call count: ');
$logger.log(m1(2), 'Output: ');
$logger.log(callCount, 'Call count: ');
delete m1._cache[1];
$logger.log(m1(1), 'Output: ');
$logger.log(callCount, 'Call count: ');

delete m1.cache;


// ------------------------------------------------------------------------ spec

$logger.separator('Spec use');
// $logger.on();

m1.input = {
	inputToSpec: {
		'String': 'str',
		'Number': 'nb',
		'Boolean': function(input) {
			return {
				val: input ? 1 : 0
			}
		}
	},
	properties: [
		'str',
		['nb'],
		{name: 'val'}
	]
}
m1.process = function(spec) {
	return spec;
}
$logger.log(m1);
// $logger.log(m1());
$logger.log(m1('a string'));
$logger.log(m1(5));
$logger.log(m1(true));
$logger.log(m1(false));
$logger.log(m1({str: 'a string', nb: 5, val: true}));

// ------------------------------------------------------------------ spec chain

$logger.separator('Chain using spec property');
// $logger.on();

m1.output = 'str';
$logger.log(m1('a string'));
m1.output = 'nb';
$logger.log(m1(5));
m1.output = 'val';
$logger.log(m1(true));

delete m1.output;




// -----------------------------------------------------------------------------

$logger.separator('Negation');
$logger.on();

var context = {prop: null};
var fn = method.negate(function() {return !!this.prop;}, context);

context.prop = true;
$logger.log(fn());
context.prop = false;
$logger.log(fn());
context.prop = 0;
$logger.log(fn());
context.prop = 1;
$logger.log(fn());



// -----------------------------------------------------------------------------

$logger.separator('Composition');
$logger.on();

var fn = method.compose([]);
$logger.log(fn());

var context = {factor: 3, offset: -1}
var fn = method.compose([
		function(a, b) {
			return a + b;
		},
		function(a) {
			return a * this.factor;
		},
		function(a) {
			return a + this.offset;
		}
	],
	context
);

$logger.log(fn(1, 2));



} catch (exception) {
	console.error(exception.msg);
	console.error(exception.stack);
	// console.error(util.inspect(exception, {colors: true, depth: 5}));
}
