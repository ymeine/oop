require! {
	'std/test/logger'
	oop
}

{Logger} = logger



$logger = Logger!


# ------------------------------------------------------------------------------

$logger.separator 'Basic'
# $logger.on!

Class = oop.Class {
	name: 'Test 1'
}
# $logger.log Class

instance = new Class!
$logger.log instance
$logger.log instance instanceof Class
instance = Class!
$logger.log instance
$logger.log instance instanceof Class

# ------------------------------------------------------------------------------

$logger.separator 'Identification & Constructor function'
# $logger.on!

Class = oop.Class {
	id: 'Test 2'
	doc: 'This is the second test class'
	ctor: (@property) ->
}
# $logger.log Class

$logger.log new Class 5
$logger.log Class 10

# ------------------------------------------------------------------------------

$logger.separator 'Constructor schema'
# $logger.on!

Class = oop.Class {
	displayname: 'Test 3'
	desc: 'This is the third test class'
	ctor: {
		inputToSpec: {
			'String': 'str'
			'Number': 'nb'
			'Boolean': -> {bool: it}
		}
		properties: [
			{names: <[str string]>}
			{names: <[nb number]> default: 0}
			{names: <[bool boolean]>}
		]
	}
}
# $logger.log Class

$logger.log Class 5
$logger.log Class 'lol'
$logger.log Class on
$logger.log Class off
$logger.log Class {number: 5}
$logger.log Class {string: 'lol'}
$logger.log Class {boolean: off}
$logger.log Class {string: 'lol' nb: 5 boolean: off}

# ------------------------------------------------------------------------------

$logger.separator 'Factories'
# $logger.on!

Class = oop.Class {
	name: 'Test 4'
	description: 'This is the third test class'

	schema: {
		inputToSpec: {
			'String': 'str'
			'Number': 'nb'
			'Boolean': -> {bool: it}
		}
		properties: [
			{names: <[str string]>}
			{names: <[nb number]> default: 0}
			{names: <[bool boolean]>}
		]
	}

	factories: {
		required:
			arguments: {bool: 0, string: 1}
		test:
			arguments: {string: 1}
			values: {bool: on}

	}
}
# $logger.log Class

$logger.log Class.required off 'spring'
$logger.log Class.test void 'mdr'

# ------------------------------------------------------------------------------

$logger.separator 'Instance properties'
# $logger.on!

Class = oop.Class {
	name: 'Test 5'
	description: 'This is the fifth test class'

	schema: {
		inputToSpec: {
			'String': 'str'
			'Number': 'nb'
			'Boolean': -> {bool: it}
		}
		properties: [
			{names: <[str string]>}
			{names: <[nb number]> default: 0}
			{names: <[bool boolean]>}
		]
	}

	properties: {
		info: get: -> "String: #{@str}, number: #{@nb}, boolean: #{@bool}"
	}
}
# $logger.log Class

instance = Class {str: 'ok', -boolean}
$logger.log instance
$logger.log instance.info

# ------------------------------------------------------------------------------

$logger.separator 'Instance properties 2'
# $logger.on!

Class = oop.Class {
	name: 'Test 5'
	description: 'This is the fifth test class'

	schema: {
		inputToSpec: {
			'String': 'str'
			'Number': 'nb'
			'Boolean': -> {bool: it}
		}
		properties: [
			{names: <[str string]>}
			{names: <[nb number]> default: 0}
			{names: <[bool boolean]>}
		]
	}

	properties: [
		{
			names: ['info']
			descriptor: get: -> "String: #{@str}, number: #{@nb}, boolean: #{@bool}"
		}
	]
}
# $logger.log Class

instance = Class {str: 'ok', -boolean}
$logger.log instance
$logger.log instance.info

# ------------------------------------------------------------------------------

$logger.separator 'Prototype (& callable instance using instance properties)'
# $logger.on!

Class = oop.Class {
	ctor: (@a, @b, @c) ->
	proto: {
		getA: -> @a
		getB: -> @b
		getC: -> @c
	}
	call: -> @a + @b + @c
}
# $logger.log Class

instance = Class 1 2 3
$logger.log instance.getA!
$logger.log instance.getB!
$logger.log instance.getC!
$logger.log instance!


# ------------------------------------------------------------------------------

$logger.separator 'Callable instance'
# $logger.on!

Class = oop.Class {
	ctor: (@p) ->
	call: -> "Property: #{@p}"
}
# $logger.log Class

instance = Class 10
$logger.log instance!



Class = oop.Class {
	ctor: (@p) ->
	call: {
		alias: 'exec'
		def: -> "Property: #{@p}"
	}
}
# $logger.log Class
Class.prototype.c = 20
# Class.prototype.exec = -> 'Im a noob'

instance = new Class 15
$logger.log instance!
$logger.log instance.c
$logger.log instance.exec!
$logger.log instance.bind


# ------------------------------------------------------------------------------

$logger.separator 'Method factory - chain'
$logger.on!

method = oop.methodFactory {
	+chainable
	exec: -> @p
}
context = {p: 10}

$logger.log method
$logger.log method.call context
method.chainable = off
$logger.log method.call context

# ------------------------------------------------------------------------------

$logger.separator 'Method factory - property'
$logger.on!

method = oop.methodFactory {
	exec: (spec) -> spec
	input: {
		inputToSpec: String: 'property'
		properties: <[property]>
	}
}
context = {val: 'this'}

$logger.log method

$logger.log method.call context, 'propertyValue'

method.output = 'property'
$logger.log method.call context, 'propertyValue'

method.chainable = on
$logger.log method.call context, 'propertyValue'