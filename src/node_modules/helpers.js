var prelude = require('prelude-ls');

var dop = require('dop');



var propertyIds = dop.propertyIds;

var own = Object.prototype.hasOwnProperty;




/**
 * Imports all own properties of given src object to given output obj.
 *
 * You can specify wether or not to import explicit undefined values (by default no).
 * @todo Have more configuration: import only own or not, use a blacklist or a whitelist (simple inclusion/exclusion patterns)
 */
function _import(obj, src, importVoid) {
	if (importVoid == null) importVoid = false;

	for (var key in src) {
		if (own.call(src, key)) {
			var value = src[key];
			if (importVoid || value != null) {
				obj[key] = value;
			}
		}
	}

	return obj;
}

/**
 * Converts {key: value, ...} to either [{names: [key], <property>: value}, ...] or [value <<< {names: [key]}, ...]
 */
function mapArrayFactory(input, property) {
	if (prelude.isType('Array', input)) {
		return input;
	} else if (prelude.isType('Object', input)) {
		var array = [];

		for (var name in input) {
			var value = input[name];

			var obj;
			if (property != null) {
				obj = {};
				obj[property] = value;
			} else {
				obj = value;
			}

			assignFree(obj, [name], propertyIds.names, true);

			array.push(obj);
		}

		return array;
	} else {
		// Error
	}
}

/**
 * Assigns a value to an object under the first free name among a given list.
 *
 * If no free slot has been found, it can use the first given name anyway if you force override (default behavior).
 *
 * @return The chosen name
 */
function assignFree(obj, value, names, override) {
	override == null && (override = true);

	for (var i = 0, length = names.length; i < length; i++) {
		var name = names[i];
		if (obj[name] === undefined) {
			obj[name] = value;
			return name;
		}
	}

	if (override) {
		var name = names[0];
		obj[name] = value;
		return name;
	}
}





exports.import = _import;
exports.mapArrayFactory = mapArrayFactory;
exports.assignFree = assignFree;
exports.own = own;
