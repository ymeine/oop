var prelude = require('prelude-ls');

var dop = require('dop');



/*******************************************************************************
 * Various
 ******************************************************************************/

var propertyIds = dop.propertyIds;



/*******************************************************************************
 * Core
 ******************************************************************************/

var toString$ = Object.prototype.toString;
function getType(value) {
	return toString$.call(value).slice(8, -1);
}

own$ = Object.prototype.hasOwnProperty;
function hasOwnProperty(object, property) {
	return own$.call(object, property);
}



/*******************************************************************************
 * Control flow
 ******************************************************************************/

function forKeyValue(cb, object, own) {
	// Input arguments processing ----------------------------------------------

	// --------------------------------------------------------------------- own

	if (own == null) {own = true}

	// Processing --------------------------------------------------------------

	// The code below has been duplicated with a subtle difference, to avoid testing the `own` value at each iteration, knowning that it will never change.
	// Also, I don't refactor using a function, because this would probably impact performances

	// ---------------------------------------------------------- Own properties
	if (own) {
		for (var key in object) {
			if (hasOwnProperty(object, key)) {
				if (cb(key, object[key]) === true) {
					return;
				}
			}
		}
	// ---------------------------------------------------------- All properties
	} else {
		for (var key in object) {
			if (cb(key, object[key]) === true) {
				return;
			}
		}
	}

	// Return ------------------------------------------------------------------

	return object;
}



/*******************************************************************************
 * Object manipulation
 ******************************************************************************/

function _import(object, source, importVoid, own) {
	// Input arguments processing ----------------------------------------------

	// -------------------------------------------------------------- importVoid

	if (importVoid == null) {importVoid = false;}

	// --------------------------------------------------------------------- own

	if (own == null) {own = true}

	// Processing --------------------------------------------------------------

	// ------------------------------------------------------------- Import void
	if (importVoid) {
		forKeyValue(function(key, value) {
			object[key] = value;
		}, source, own);
	// --------------------------------------------------------------- Skip void
	} else {
		forKeyValue(function(key, value) {
			if (value != null) {object[key] = value;}
		}, source, own);
	}

	// Return ------------------------------------------------------------------

	return object;
}

/**
 * Converts {key: value, ...} to either [{names: [key], <property>: value}, ...] or [value <<< {names: [key]}, ...]
 */
function mapArrayFactory(input, property) {
	// Early termination -------------------------------------------------------

	var inputType = getType(input);

	if (inputType === 'Array') {return input;}

	// Input arguments processing ----------------------------------------------

	// Processing --------------------------------------------------------------

	var array = [];

	function addObject(object, name) {
		assignFree(object, [name], propertyIds.names, true);
		array.push(object);
	}

	if (property != null) {
		property = "" + property;

		forKeyValue(function(name, value) {
			var object = {};
			object[property] = value;

			addObject(object, name);
		}, input);
	} else {
		forKeyValue(function(name, value) {
			var object = value;

			addObject(object, name);
		}, input);
	}

	// Return ------------------------------------------------------------------

	return array;
}

/**
 * Assigns a value to an object under the first free name among a given list.
 *
 * If no free slot has been found, it can use the first given name anyway if you force override (default behavior).
 *
 * @return The chosen name
 */
function assignFree(output, value, names, override) {
	// Input arguments processing ----------------------------------------------

	// ---------------------------------------------------------------- override

	if (override == null) {override = true;}

	// Processing --------------------------------------------------------------

	for (var i = 0, length = names.length; i < length; i++) {
		var name = names[i];
		if (output[name] === undefined) {
			output[name] = value;
			return name;
		}
	}

	if (override) {
		var name = names[0];
		output[name] = value;
		return name;
	}
}

/**
 * Maps a list (positions) and fixed values to properties of an object.
 */
function listToObject(list, indexes, mixin) {
	var spec = {};

	helpers.forKeyValue(function(property, index) {
		spec[property] = list[index];
	}, indexes);

	helpers.forKeyValue(function(property, value) {
		spec[property] = value;
	}, mixin);

	return spec;
}



/*******************************************************************************
 * Exports
 ******************************************************************************/

exports.getType = getType;
exports.hasOwnProperty = hasOwnProperty;

exports.forKeyValue = forKeyValue;

exports.import = _import;
exports.mapArrayFactory = mapArrayFactory;
exports.assignFree = assignFree;
exports.listToObject = listToObject;
