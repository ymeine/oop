var Logger = require('tester').logger.Logger;
var Property = require('./property').Property;



var $logger = new Logger();

var names = ['name1', 'name2'];
var defaultValue = 'defaultValue';
var property;

// -----------------------------------------------------------------------------

$logger.sep('Name - Build');
$logger.on();

$logger.log(new Property('name'));
$logger.log(new Property(names));
$logger.log(new Property({name: 'name'}));
property = new Property({names: names});
$logger.log(property);

// -----------------------------------------------------------------------------

$logger.sep('Name - Extract');
$logger.on();

$logger.log(property.extract({
	name1: 'name1Value'
}));
$logger.log(property.extract({
	name2: 'name2Value'
}));
$logger.log(property.extract({
	name1: 'name1Value',
	name2: 'name2Value'
}));
$logger.log((new Property(names.reverse())).extract({
	name1: 'name1Value',
	name2: 'name2Value'
}));
$logger.log(property.extract({}));

// -----------------------------------------------------------------------------

$logger.sep('Skip (null)');
$logger.on();

$logger.log(property.extract({name1: null}));

// -----------------------------------------------------------------------------

$logger.sep('Required');
$logger.on();

property = new Property({
	names: names,
	required: true
});
$logger.log(property);

$logger.log(property.extract({name1: 'name1Value'}));
$logger.fail(function(){return property.extract({})});

// -----------------------------------------------------------------------------

$logger.sep('Default');
$logger.on();

property = new Property({
	names: names,
	default: defaultValue
});
$logger.log(property);

$logger.log(property.extract({name1: 'name1Value'}));
$logger.log(property.extract({}));

property = new Property({
	names: names,
	default: function() {
		return defaultValue;
	}
});
$logger.log(property);

$logger.log(property.extract({}));

// -----------------------------------------------------------------------------

$logger.sep('Constructor / factory');
$logger.on();

function ValueCtor(value) {
	this.value = value;
}

property = new Property({
	names: names,
	type: ValueCtor
});
$logger.log(property);
$logger.log(property.extract({name1: 'value'}));

ValueCtor.factory = function(input) {
	var instance = new ValueCtor(input);
	instance.__factory = true;
	return instance;
}

$logger.log(property.extract({name1: 'value'}));
