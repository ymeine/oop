var types = require('oop/types').types;



/**
 * @todo Move to std library. Or to Property here.
 *
 * Finds a property among a given list of names. Returns the first name found, or null otherwise.
 *
 * Warning: Considers that a property access returning 'undefined' exactly means no property, whether the 'undefined' value was explicitely set or not.
 */
function findProperty(input, names, own) {
	for (var i = 0, length = names.length; i < length; i++) {
		var name = names[i];
		if (input[name] !== undefined && (!own || input.hasOwnProperty(name))) {
			return name;
		}
	};
}

/**
 * Finds a value under the first property found among the given names. If nothing found, returns undefined.
 */
function findValue(input, names, own) {
	var name = findProperty(input, names, own);

	if (name != null) {
		return input[name];
	}
}



/**
 * @deprecated weird 'info' object used for output.
 *
 * Extracts a value from the given object using the given names
 */
function extract(input, names, infos) {
	var name = findProperty(input, names);

	if (name != null) {
		if (infos != null) {
			infos.name = name;
		}
		return input[name];
	}
}

// @notDocumented
function extractSafe(input, names, infos) {
	// ------------------------------------------------------------------- input

	if (input == null) {
		throw Error('No input given');
	}

	// ------------------------------------------------------------------- names

	if (names == null) {
		throw Error('No name given');
	}

	names = types.Array.factory(names); // TODO Use std instead

	// ------------------------------------------------------------------- infos

	if (infos != null && !prelude.isType('Object', infos)) { // TODO Use std instead
		throw Error('Invalid given infos object');
	}

	// if (!prelude.isType('Object', infos)) {infos = {}}

	// -------------------------------------------------------------------------

	extract(input, names, infos);
}





exports.findProperty = findProperty;
exports.find = findValue;

exports.extract = extract;
exports.extractSafe = extractSafe;
