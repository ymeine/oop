// TODO Add those functions to the Property class (see other file)

var types = require('oop/types').types;
var Property = require('./property').Property;
var Value = require('./value');



function extractProperty(input, propertySpec, context, infos) {
	// Input arguments processing ----------------------------------------------

	// ------------------------------------------------------------ propertySpec

	propertySpec = Property.factory(propertySpec);

	// ----------------------------------------------------------------- context

	// ------------------------------------------------------------------- infos

	if (infos == null) {
		// An object that will be useless since not returned but will avoid multiple checks below
		infos = {};
	}

	// Processing --------------------------------------------------------------

	// -------------------------------------------------------------- Extraction

	var names = Value.find(propertySpec, propertyIds.names);
	names = types.Array.factory(names); // TODO Use std instead
	var value = Value.extract(input, names, infos);
	infos.originalValue = value;

	// ----------------------------------------------- Null - Skips the property
	// Explicit null value will skip the process of inference, applying default value, ...

	if (value === null) {
		infos.skipped = true;
		return;
	};
	infos.skipped = false;

	// ------------------------------------------------------------- Constructor

	// WARNING Same remark as in `oop` module: 'constructor' to be kept at the end
	var constructor = Value.find(propertySpec, ['ctor', 'type', 'factory', 'class', 'constructor']);

	if (constructor != null) {
		var factory = constructor.factory;
		if (factory != null) {
			infos.constructor = constructor;

			if (value !== undefined) {
				value = factory(value);
			}

			if (value == null && propertySpec.mixed) {
				try {
					infos.mixed = true;
					value = factory(input);
				} catch (e) {}
			}
		}
	}

	// ----------------------------------------------------------------- Default

	if (value === undefined) {
		var def = Value.find(propertySpec, ['default', 'def']);
		if (def != null) {
			if (prelude.isType('Function', def)) {
				// TODO be able to specify context per input
				// def = def(Value.find(input, ['context', 'scope']);
				def = def.call(context);
			}

			infos.default = true;

			value = def;

			if (factory != null && value !== undefined) {
				value = factory(value);
			}
		}
	}

	// ------------------------------------------------------------ Post-process

	var postprocess = Value.find(propertySpec, ['postprocess', 'postProcess', 'post', 'process']);
	if (postprocess != null) {
		infos.postProcessed = true;
		value = postprocess(value);
	} else {
		infos.postProcessed = false;
	}

	// ---------------------------------------------------------------- Required

	var required = Value.find(propertySpec, ['required', 'req']);
	if (required) {
		if (value == null) {
			throw {
				msg: 'Missing required value',
				property: propertySpec,
				input: input
			}
		}
	}

	// Return ------------------------------------------------------------------

	infos.value = value;
	return value;
}



exports.extractProperty = extractProperty;
